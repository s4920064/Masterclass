#ifndef JITTER_H_
#define JITTER_H_
#include <ngl/NGLInit.h>
#include <ngl/Vec2.h>
#include <ngl/Vec4.h>
#include <ngl/Mat4.h>

//----------------------------------------------------------------------------------------------------------------------
/// @file Jitter.h
/// @author Emma Koo
/// @class Jitter
/// @brief A class to handle the generation and evolution of the scene's jitter
//----------------------------------------------------------------------------------------------------------------------

class Jitter
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor for the jitter class
  //----------------------------------------------------------------------------------------------------------------------
  Jitter();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~Jitter();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief generates a translation matrix that jitters the current frame (2 subsamples)
  //----------------------------------------------------------------------------------------------------------------------
  void make2x();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief generates a translation matrix that jitters the current frame (5 subsamples in quincunx pattern)
  //----------------------------------------------------------------------------------------------------------------------
  void makeQuincunx();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the jitter translation matrix
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Mat4 getMatrix() const {return m_matrix;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the jitter offset vector
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Vec2 getOffset() const {return m_offset;}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief updates the jitterCycle id - incrementing it and resetting when the maximum index is reached (2 or 5)
  //----------------------------------------------------------------------------------------------------------------------
  void updateCycle(int samples);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief an id which keeps track of the number of subsamples we are iterating through in the jitter pattern
  //----------------------------------------------------------------------------------------------------------------------
  int m_cycle = 0;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a matrix containing the translations for our current jitter
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_matrix;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the translations for our current jitter
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec2 m_offset;
};
#endif
