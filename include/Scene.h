#ifndef SCENE_H_
#define SCENE_H_
#include <ngl/Text.h>
#include <ngl/Mat4.h>
#include <ngl/ShaderLib.h>
#include <ngl/Obj.h>
#include "Camera.h"
#include "Jitter.h"
#include <QOpenGLWindow>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @author Emma Koo
/// Revision History :
/// This was an initial version used for the new NGL6 / Qt 5 demos created by Jon Macey, now refurbished for this Masterclass demo
/// @class Scene
/// @brief This class inherits from the Qt OpenGLWindow and draws the scene with the TAA shader before passing the result to the screen
//----------------------------------------------------------------------------------------------------------------------

class Scene : public QOpenGLWindow
{
  Q_OBJECT
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor for our NGL drawing class
  /// @param [in] parent the parent window to the class
  //----------------------------------------------------------------------------------------------------------------------
  Scene();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor must close down ngl and release OpenGL resources
  //----------------------------------------------------------------------------------------------------------------------
  ~Scene() override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the initialize class is called once when the window is created and we have a valid GL context
  /// use this to setup any default GL stuff
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL() override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called everytime we want to draw the scene
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL() override;

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a QTime object used for tracking the framerate
  //----------------------------------------------------------------------------------------------------------------------
  QTime m_time;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief elapsed time since the last frame
  //----------------------------------------------------------------------------------------------------------------------
  int m_deltaTime;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the current framerate
  //----------------------------------------------------------------------------------------------------------------------
  int m_framerate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a flag indicating whether this is the first frame
  //----------------------------------------------------------------------------------------------------------------------
  bool m_start = true;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief TAA subroutine flag
  //----------------------------------------------------------------------------------------------------------------------
  bool m_TAA = true;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Neighborhood clamping subroutine flag
  //----------------------------------------------------------------------------------------------------------------------
  bool m_subNbrClamp = true;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Reprojection subroutine flag
  //----------------------------------------------------------------------------------------------------------------------
  bool m_subReproject = true;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the virtual camera of the scene
  //----------------------------------------------------------------------------------------------------------------------
  Camera m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the jitter struct of the scene
  //----------------------------------------------------------------------------------------------------------------------
  Jitter m_jitter;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the view matrix for camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_view;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the view matrix for camera of the previous frame
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_viewPrev;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the projection matrix for camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_projection;
  bool m_transformLight=false;
  ngl::Vec4 m_lightPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to load transform matrices to the shader, originally by Jon Macey, modified
  /// @param [in] takes in the name of the shader shaderName to draw the object with as well as its model matrix _M
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader(const char* shaderName, ngl::Mat4 _M);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to load a texture from file, code by Jon Macey
  //----------------------------------------------------------------------------------------------------------------------
  void loadTexture();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief street model
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr<ngl::Obj> m_meshStreet;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief street ground model
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr<ngl::Obj> m_meshGround;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief street large walls model
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr<ngl::Obj> m_meshWalls;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief fence model (error on load, so not currently used)
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr<ngl::Obj> m_meshFence;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief id for the scene's brick texture
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_brickTexture;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief id for the scene's cubemap environment texture
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_envTex;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ids for the color attachments used by the FBOs.
  /// (two for the history ping pongs, one for the current frame, and one for the current frame with MSAA)
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_fboTexId[3];
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ids for the depth attachments used by the current frame fbo
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_fboDepthId;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief an index that alternates between 0 and 1 to help ping pong texture locations and fbos
  //----------------------------------------------------------------------------------------------------------------------
  int m_ping;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our FBO IDs used by the FBOs
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_fboId[3];
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief creates the texture objects for the FBOs
  //----------------------------------------------------------------------------------------------------------------------
  void createTextureObjects();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief creates the FBOs
  //----------------------------------------------------------------------------------------------------------------------
  void createFramebufferObject();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief draw the objects in the scene
  /// @param [in] passes an instance of the NGL primitives to draw primitive geometry from the NGL library
  //----------------------------------------------------------------------------------------------------------------------
  void drawSceneGeometry(ngl::VAOPrimitives* _prim);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief draw a screen-oriented plane
  /// @param [in] passes an instance of the shader handler as well as NGL primitives
  //----------------------------------------------------------------------------------------------------------------------
  void drawScreenOrientedPlane(GLuint _pid, ngl::VAOPrimitives* _prim);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief generate textures and send uniform to PBR shader for the environment map
  //----------------------------------------------------------------------------------------------------------------------
  void initEnvironment();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load images to be the sides of the cubemap for the environment
  //----------------------------------------------------------------------------------------------------------------------
  void initEnvironmentSide(GLenum target, const char *filename);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief draw text over the screen (glitches the screen every now and then, so not currently used)
  //----------------------------------------------------------------------------------------------------------------------
  void renderText();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when a key is pressed
  /// @param [in] _event the Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void keyPressEvent(QKeyEvent *_event) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when a key is released
  /// @param [in] _event the Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void keyReleaseEvent(QKeyEvent *_event) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent(QMouseEvent *_event) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent(QMouseEvent *_event) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent(QMouseEvent *_event) override;
};

//----------------------------------------------------------------------------------------------------------------------
/// @brief the width of the window
//----------------------------------------------------------------------------------------------------------------------
constexpr int TEXTURE_WIDTH=1024;
//----------------------------------------------------------------------------------------------------------------------
/// @brief the height of the window
//----------------------------------------------------------------------------------------------------------------------
constexpr int TEXTURE_HEIGHT=720;

#endif
